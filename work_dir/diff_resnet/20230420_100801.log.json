{"env_info": "sys.platform: linux\nPython: 3.7.13 (default, Mar 29 2022, 02:18:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: /usr/local/cuda-11.6\nNVCC: Cuda compilation tools, release 11.6, V11.6.55\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.12.1+cu116\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu116\nOpenCV: 4.6.0\nMMCV: 1.6.2\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6\nMMRotate: 0.3.3+", "config": "dataset_type = 'DOTADataset'\ndata_root = '/opt/data/private/shen/data/split_ss_dota'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='RResize', img_scale=(1024, 1024)),\n    dict(\n        type='RRandomFlip',\n        flip_ratio=[0.25, 0.25, 0.25],\n        direction=['horizontal', 'vertical', 'diagonal'],\n        version='le90'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='RResize'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='DOTADataset',\n        ann_file='/opt/data/private/shen/data/split_ss_dota/train/annfiles/',\n        img_prefix='/opt/data/private/shen/data/split_ss_dota/train/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='RResize', img_scale=(1024, 1024)),\n            dict(\n                type='RRandomFlip',\n                flip_ratio=[0.25, 0.25, 0.25],\n                direction=['horizontal', 'vertical', 'diagonal'],\n                version='le90'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        version='le90'),\n    val=dict(\n        type='DOTADataset',\n        ann_file='/opt/data/private/shen/data/split_ss_dota/val/annfiles/',\n        img_prefix='/opt/data/private/shen/data/split_ss_dota/val/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='RResize'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        version='le90'),\n    test=dict(\n        type='DOTADataset',\n        ann_file='/opt/data/private/shen/data/split_ss_dota/val/annfiles/',\n        img_prefix='/opt/data/private/shen/data/split_ss_dota/val/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='RResize'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        version='le90'))\nevaluation = dict(interval=1, metric='mAP')\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/opt/data/private/shen/mmrotate-0.3.3/checkpoints/oriented_rcnn_r50_fpn_1x_dota_le90-6d2b2ce0.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nangle_version = 'le90'\nmodel = dict(\n    type='OrientedRCNN',\n    backbone=dict(\n        type='Diff_ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[512, 1024, 2048, 4096],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='OrientedRPNHead',\n        in_channels=256,\n        feat_channels=256,\n        version='le90',\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='MidpointOffsetCoder',\n            angle_range='le90',\n            target_means=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0, 0.5, 0.5]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='OrientedStandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='RotatedSingleRoIExtractor',\n            roi_layer=dict(\n                type='RoIAlignRotated',\n                out_size=7,\n                sample_num=2,\n                clockwise=True),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            reg_decoded_bbox=False,\n            type='RotatedShared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=15,\n            bbox_coder=dict(\n                type='DeltaXYWHAOBBoxCoder',\n                angle_range='le90',\n                norm_factor=None,\n                edge_swap=True,\n                proj_xy=True,\n                target_means=(0.0, 0.0, 0.0, 0.0, 0.0),\n                target_stds=(0.1, 0.1, 0.2, 0.2, 0.1)),\n            reg_class_agnostic=True,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.8),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                iou_calculator=dict(type='RBboxOverlaps2D'),\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RRandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.8),\n            min_bbox_size=0),\n        rcnn=dict(\n            nms_pre=2000,\n            min_bbox_size=0,\n            score_thr=0.05,\n            nms=dict(iou_thr=0.1),\n            max_per_img=2000)))\nwork_dir = '/opt/data/private/shen/mmrotate-0.3.3/work_dir/diff_resnet'\nseed = 518\ngpu_ids = range(0, 1)\nauto_resume = False\n", "seed": 280874747, "exp_name": "diff_resnet_dota.py"}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00233, "memory": 6148, "data_time": 0.03197, "loss_rpn_cls": 0.16755, "loss_rpn_bbox": 0.24675, "loss_cls": 0.38745, "acc": 91.57227, "loss_bbox": 0.29824, "loss": 1.09999, "grad_norm": 6.36013, "time": 0.35661}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00299, "memory": 6309, "data_time": 0.00748, "loss_rpn_cls": 0.05804, "loss_rpn_bbox": 0.17544, "loss_cls": 0.24637, "acc": 91.98145, "loss_bbox": 0.27303, "loss": 0.75289, "grad_norm": 4.74467, "time": 0.30738}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00366, "memory": 6309, "data_time": 0.00725, "loss_rpn_cls": 0.05314, "loss_rpn_bbox": 0.13932, "loss_cls": 0.21417, "acc": 92.30566, "loss_bbox": 0.22361, "loss": 0.63023, "grad_norm": 4.35284, "time": 0.30775}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00433, "memory": 8749, "data_time": 0.00703, "loss_rpn_cls": 0.05641, "loss_rpn_bbox": 0.1547, "loss_cls": 0.21845, "acc": 92.13867, "loss_bbox": 0.20843, "loss": 0.638, "grad_norm": 4.60324, "time": 0.3087}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00499, "memory": 8749, "data_time": 0.00739, "loss_rpn_cls": 0.05099, "loss_rpn_bbox": 0.13773, "loss_cls": 0.21656, "acc": 92.05273, "loss_bbox": 0.21825, "loss": 0.62353, "grad_norm": 4.28098, "time": 0.30882}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.005, "memory": 8749, "data_time": 0.00734, "loss_rpn_cls": 0.04877, "loss_rpn_bbox": 0.13261, "loss_cls": 0.22882, "acc": 91.97363, "loss_bbox": 0.20656, "loss": 0.61675, "grad_norm": 4.46046, "time": 0.30891}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.005, "memory": 8749, "data_time": 0.0071, "loss_rpn_cls": 0.04756, "loss_rpn_bbox": 0.12633, "loss_cls": 0.21448, "acc": 92.24609, "loss_bbox": 0.20255, "loss": 0.59092, "grad_norm": 4.08403, "time": 0.30853}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.005, "memory": 8749, "data_time": 0.00729, "loss_rpn_cls": 0.04925, "loss_rpn_bbox": 0.15156, "loss_cls": 0.20937, "acc": 92.22363, "loss_bbox": 0.22333, "loss": 0.63352, "grad_norm": 4.06989, "time": 0.30813}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.005, "memory": 8749, "data_time": 0.00747, "loss_rpn_cls": 0.04654, "loss_rpn_bbox": 0.1374, "loss_cls": 0.17583, "acc": 93.35938, "loss_bbox": 0.18136, "loss": 0.54113, "grad_norm": 3.51641, "time": 0.30772}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.005, "memory": 8749, "data_time": 0.00746, "loss_rpn_cls": 0.05379, "loss_rpn_bbox": 0.11619, "loss_cls": 0.20091, "acc": 92.62598, "loss_bbox": 0.18097, "loss": 0.55186, "grad_norm": 3.8999, "time": 0.30717}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.005, "memory": 8749, "data_time": 0.00733, "loss_rpn_cls": 0.04966, "loss_rpn_bbox": 0.1189, "loss_cls": 0.20439, "acc": 92.4502, "loss_bbox": 0.21012, "loss": 0.58307, "grad_norm": 4.00966, "time": 0.30741}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.005, "memory": 8749, "data_time": 0.00738, "loss_rpn_cls": 0.03825, "loss_rpn_bbox": 0.12166, "loss_cls": 0.20166, "acc": 92.4248, "loss_bbox": 0.19532, "loss": 0.55689, "grad_norm": 3.63949, "time": 0.30811}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.005, "memory": 8749, "data_time": 0.00729, "loss_rpn_cls": 0.04279, "loss_rpn_bbox": 0.09829, "loss_cls": 0.19094, "acc": 92.75098, "loss_bbox": 0.20316, "loss": 0.53518, "grad_norm": 3.72001, "time": 0.30675}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.005, "memory": 8749, "data_time": 0.00741, "loss_rpn_cls": 0.03876, "loss_rpn_bbox": 0.10552, "loss_cls": 0.19166, "acc": 92.75, "loss_bbox": 0.18839, "loss": 0.52432, "grad_norm": 3.42119, "time": 0.30703}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.005, "memory": 8749, "data_time": 0.00758, "loss_rpn_cls": 0.03876, "loss_rpn_bbox": 0.08455, "loss_cls": 0.17123, "acc": 93.74512, "loss_bbox": 0.15289, "loss": 0.44744, "grad_norm": 3.42043, "time": 0.30921}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.005, "memory": 8749, "data_time": 0.00724, "loss_rpn_cls": 0.04269, "loss_rpn_bbox": 0.10094, "loss_cls": 0.18204, "acc": 93.2832, "loss_bbox": 0.17458, "loss": 0.50025, "grad_norm": 3.68595, "time": 0.30586}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.005, "memory": 8749, "data_time": 0.00737, "loss_rpn_cls": 0.03402, "loss_rpn_bbox": 0.10859, "loss_cls": 0.18507, "acc": 93.05078, "loss_bbox": 0.19039, "loss": 0.51807, "grad_norm": 3.4103, "time": 0.30767}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.005, "memory": 8749, "data_time": 0.00739, "loss_rpn_cls": 0.03506, "loss_rpn_bbox": 0.10166, "loss_cls": 0.1837, "acc": 92.92188, "loss_bbox": 0.17515, "loss": 0.49558, "grad_norm": 3.25128, "time": 0.30954}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.005, "memory": 8749, "data_time": 0.00751, "loss_rpn_cls": 0.0388, "loss_rpn_bbox": 0.10667, "loss_cls": 0.18434, "acc": 92.86523, "loss_bbox": 0.16503, "loss": 0.49484, "grad_norm": 3.68103, "time": 0.30825}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.005, "memory": 8749, "data_time": 0.00755, "loss_rpn_cls": 0.0371, "loss_rpn_bbox": 0.09533, "loss_cls": 0.16817, "acc": 93.46094, "loss_bbox": 0.16839, "loss": 0.46899, "grad_norm": 3.17797, "time": 0.30841}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.005, "memory": 8749, "data_time": 0.00734, "loss_rpn_cls": 0.03518, "loss_rpn_bbox": 0.1056, "loss_cls": 0.18111, "acc": 92.83691, "loss_bbox": 0.17022, "loss": 0.49211, "grad_norm": 3.24432, "time": 0.30802}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.005, "memory": 8749, "data_time": 0.00767, "loss_rpn_cls": 0.0329, "loss_rpn_bbox": 0.10683, "loss_cls": 0.18307, "acc": 93.01465, "loss_bbox": 0.18785, "loss": 0.51065, "grad_norm": 3.42978, "time": 0.30968}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 0.005, "memory": 8749, "data_time": 0.00731, "loss_rpn_cls": 0.03094, "loss_rpn_bbox": 0.10847, "loss_cls": 0.17659, "acc": 93.32715, "loss_bbox": 0.16946, "loss": 0.48545, "grad_norm": 3.46777, "time": 0.30945}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 0.005, "memory": 8749, "data_time": 0.00734, "loss_rpn_cls": 0.03504, "loss_rpn_bbox": 0.11693, "loss_cls": 0.18143, "acc": 93.14258, "loss_bbox": 0.17727, "loss": 0.51066, "grad_norm": 3.44872, "time": 0.308}
{"mode": "train", "epoch": 1, "iter": 2500, "lr": 0.005, "memory": 8749, "data_time": 0.00744, "loss_rpn_cls": 0.03374, "loss_rpn_bbox": 0.11493, "loss_cls": 0.17929, "acc": 93.06641, "loss_bbox": 0.18312, "loss": 0.51108, "grad_norm": 3.33976, "time": 0.30907}
{"mode": "train", "epoch": 1, "iter": 2600, "lr": 0.005, "memory": 8749, "data_time": 0.00739, "loss_rpn_cls": 0.03321, "loss_rpn_bbox": 0.10279, "loss_cls": 0.17582, "acc": 93.21191, "loss_bbox": 0.16659, "loss": 0.47842, "grad_norm": 3.34764, "time": 0.30754}
{"mode": "train", "epoch": 1, "iter": 2700, "lr": 0.005, "memory": 8749, "data_time": 0.00747, "loss_rpn_cls": 0.0352, "loss_rpn_bbox": 0.09425, "loss_cls": 0.18578, "acc": 92.76074, "loss_bbox": 0.17203, "loss": 0.48726, "grad_norm": 3.4717, "time": 0.30862}
{"mode": "train", "epoch": 1, "iter": 2800, "lr": 0.005, "memory": 8749, "data_time": 0.00742, "loss_rpn_cls": 0.02783, "loss_rpn_bbox": 0.09279, "loss_cls": 0.17471, "acc": 93.42871, "loss_bbox": 0.15206, "loss": 0.4474, "grad_norm": 3.35153, "time": 0.30783}
{"mode": "train", "epoch": 1, "iter": 2900, "lr": 0.005, "memory": 8749, "data_time": 0.0075, "loss_rpn_cls": 0.03311, "loss_rpn_bbox": 0.09038, "loss_cls": 0.17745, "acc": 93.12988, "loss_bbox": 0.1581, "loss": 0.45904, "grad_norm": 3.24757, "time": 0.30706}
{"mode": "train", "epoch": 1, "iter": 3000, "lr": 0.005, "memory": 8749, "data_time": 0.00745, "loss_rpn_cls": 0.02814, "loss_rpn_bbox": 0.0898, "loss_cls": 0.1523, "acc": 94.2627, "loss_bbox": 0.1473, "loss": 0.41754, "grad_norm": 3.03894, "time": 0.30804}
{"mode": "train", "epoch": 1, "iter": 3100, "lr": 0.005, "memory": 8749, "data_time": 0.00765, "loss_rpn_cls": 0.0309, "loss_rpn_bbox": 0.08712, "loss_cls": 0.14872, "acc": 94.26074, "loss_bbox": 0.15121, "loss": 0.41795, "grad_norm": 2.96454, "time": 0.30936}
{"mode": "train", "epoch": 1, "iter": 3200, "lr": 0.005, "memory": 8749, "data_time": 0.00752, "loss_rpn_cls": 0.02809, "loss_rpn_bbox": 0.09781, "loss_cls": 0.16626, "acc": 93.53418, "loss_bbox": 0.14831, "loss": 0.44047, "grad_norm": 3.1984, "time": 0.3069}
{"mode": "train", "epoch": 1, "iter": 3300, "lr": 0.005, "memory": 8749, "data_time": 0.00737, "loss_rpn_cls": 0.03101, "loss_rpn_bbox": 0.10151, "loss_cls": 0.18291, "acc": 92.95703, "loss_bbox": 0.17525, "loss": 0.49068, "grad_norm": 3.41354, "time": 0.30868}
{"mode": "train", "epoch": 1, "iter": 3400, "lr": 0.005, "memory": 8749, "data_time": 0.00737, "loss_rpn_cls": 0.02316, "loss_rpn_bbox": 0.08721, "loss_cls": 0.16482, "acc": 93.56152, "loss_bbox": 0.16283, "loss": 0.43802, "grad_norm": 2.9587, "time": 0.30752}
{"mode": "train", "epoch": 1, "iter": 3500, "lr": 0.005, "memory": 8749, "data_time": 0.00777, "loss_rpn_cls": 0.05415, "loss_rpn_bbox": 0.11341, "loss_cls": 0.18417, "acc": 93.07617, "loss_bbox": 0.17396, "loss": 0.52569, "grad_norm": 3.74371, "time": 0.30788}
{"mode": "train", "epoch": 1, "iter": 3600, "lr": 0.005, "memory": 8749, "data_time": 0.00748, "loss_rpn_cls": 0.03073, "loss_rpn_bbox": 0.10888, "loss_cls": 0.18869, "acc": 92.59766, "loss_bbox": 0.17544, "loss": 0.50374, "grad_norm": 3.22738, "time": 0.30809}
{"mode": "train", "epoch": 1, "iter": 3700, "lr": 0.005, "memory": 8758, "data_time": 0.00743, "loss_rpn_cls": 0.0219, "loss_rpn_bbox": 0.09277, "loss_cls": 0.16906, "acc": 93.32812, "loss_bbox": 0.16582, "loss": 0.44954, "grad_norm": 3.19223, "time": 0.30508}
{"mode": "train", "epoch": 1, "iter": 3800, "lr": 0.005, "memory": 8758, "data_time": 0.00758, "loss_rpn_cls": 0.04344, "loss_rpn_bbox": 0.08907, "loss_cls": 0.17414, "acc": 93.37012, "loss_bbox": 0.17724, "loss": 0.48389, "grad_norm": 3.69028, "time": 0.30722}
{"mode": "train", "epoch": 1, "iter": 3900, "lr": 0.005, "memory": 8758, "data_time": 0.00771, "loss_rpn_cls": 0.02825, "loss_rpn_bbox": 0.09442, "loss_cls": 0.16089, "acc": 93.71289, "loss_bbox": 0.16128, "loss": 0.44484, "grad_norm": 3.18959, "time": 0.30311}
{"mode": "train", "epoch": 1, "iter": 4000, "lr": 0.005, "memory": 8758, "data_time": 0.00742, "loss_rpn_cls": 0.03062, "loss_rpn_bbox": 0.10893, "loss_cls": 0.17066, "acc": 93.34863, "loss_bbox": 0.16692, "loss": 0.47714, "grad_norm": 3.34852, "time": 0.30879}
{"mode": "train", "epoch": 1, "iter": 4100, "lr": 0.005, "memory": 8758, "data_time": 0.00759, "loss_rpn_cls": 0.04122, "loss_rpn_bbox": 0.11833, "loss_cls": 0.18093, "acc": 92.9248, "loss_bbox": 0.1693, "loss": 0.50978, "grad_norm": 3.4154, "time": 0.30819}
{"mode": "train", "epoch": 1, "iter": 4200, "lr": 0.005, "memory": 8758, "data_time": 0.00759, "loss_rpn_cls": 0.02804, "loss_rpn_bbox": 0.09201, "loss_cls": 0.16659, "acc": 93.82617, "loss_bbox": 0.15421, "loss": 0.44085, "grad_norm": 3.22959, "time": 0.30582}
{"mode": "train", "epoch": 1, "iter": 4300, "lr": 0.005, "memory": 8758, "data_time": 0.00747, "loss_rpn_cls": 0.0285, "loss_rpn_bbox": 0.08517, "loss_cls": 0.14208, "acc": 94.45312, "loss_bbox": 0.14873, "loss": 0.40449, "grad_norm": 2.91505, "time": 0.30694}
{"mode": "train", "epoch": 1, "iter": 4400, "lr": 0.005, "memory": 8758, "data_time": 0.0076, "loss_rpn_cls": 0.02987, "loss_rpn_bbox": 0.08384, "loss_cls": 0.16624, "acc": 93.63672, "loss_bbox": 0.16447, "loss": 0.44442, "grad_norm": 3.02054, "time": 0.30676}
{"mode": "train", "epoch": 1, "iter": 4500, "lr": 0.005, "memory": 8758, "data_time": 0.00746, "loss_rpn_cls": 0.02429, "loss_rpn_bbox": 0.07678, "loss_cls": 0.15151, "acc": 94.07227, "loss_bbox": 0.15287, "loss": 0.40546, "grad_norm": 2.82388, "time": 0.30799}
{"mode": "train", "epoch": 1, "iter": 4600, "lr": 0.005, "memory": 8758, "data_time": 0.00771, "loss_rpn_cls": 0.03196, "loss_rpn_bbox": 0.09527, "loss_cls": 0.16046, "acc": 93.65039, "loss_bbox": 0.15476, "loss": 0.44245, "grad_norm": 3.03472, "time": 0.30829}
{"mode": "train", "epoch": 1, "iter": 4700, "lr": 0.005, "memory": 8758, "data_time": 0.00736, "loss_rpn_cls": 0.02554, "loss_rpn_bbox": 0.08628, "loss_cls": 0.1525, "acc": 93.89258, "loss_bbox": 0.15363, "loss": 0.41796, "grad_norm": 3.11518, "time": 0.30531}
{"mode": "train", "epoch": 1, "iter": 4800, "lr": 0.005, "memory": 8758, "data_time": 0.00752, "loss_rpn_cls": 0.02645, "loss_rpn_bbox": 0.09074, "loss_cls": 0.16948, "acc": 93.44336, "loss_bbox": 0.16575, "loss": 0.45242, "grad_norm": 3.31948, "time": 0.30746}
{"mode": "val", "epoch": 1, "iter": 3066, "lr": 0.005, "mAP": 0.64234}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.005, "memory": 8758, "data_time": 0.03132, "loss_rpn_cls": 0.02465, "loss_rpn_bbox": 0.08876, "loss_cls": 0.18469, "acc": 92.91992, "loss_bbox": 0.15856, "loss": 0.45667, "grad_norm": 3.35747, "time": 0.33288}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.005, "memory": 8758, "data_time": 0.00758, "loss_rpn_cls": 0.02182, "loss_rpn_bbox": 0.09151, "loss_cls": 0.1712, "acc": 93.41309, "loss_bbox": 0.16887, "loss": 0.4534, "grad_norm": 3.03398, "time": 0.30732}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.005, "memory": 8758, "data_time": 0.00741, "loss_rpn_cls": 0.02144, "loss_rpn_bbox": 0.09576, "loss_cls": 0.15627, "acc": 93.9707, "loss_bbox": 0.16166, "loss": 0.43513, "grad_norm": 2.894, "time": 0.30675}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.005, "memory": 8758, "data_time": 0.00757, "loss_rpn_cls": 0.02668, "loss_rpn_bbox": 0.09655, "loss_cls": 0.14699, "acc": 94.16406, "loss_bbox": 0.14488, "loss": 0.4151, "grad_norm": 3.06854, "time": 0.30713}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.005, "memory": 8758, "data_time": 0.00757, "loss_rpn_cls": 0.02327, "loss_rpn_bbox": 0.0929, "loss_cls": 0.15678, "acc": 93.99023, "loss_bbox": 0.1517, "loss": 0.42466, "grad_norm": 2.96825, "time": 0.30674}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.005, "memory": 8758, "data_time": 0.00758, "loss_rpn_cls": 0.02722, "loss_rpn_bbox": 0.09154, "loss_cls": 0.16803, "acc": 93.47266, "loss_bbox": 0.1739, "loss": 0.46069, "grad_norm": 3.06434, "time": 0.31084}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.005, "memory": 8758, "data_time": 0.00757, "loss_rpn_cls": 0.02139, "loss_rpn_bbox": 0.09125, "loss_cls": 0.14223, "acc": 94.53809, "loss_bbox": 0.14341, "loss": 0.39828, "grad_norm": 2.95878, "time": 0.30575}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.005, "memory": 8758, "data_time": 0.00796, "loss_rpn_cls": 0.02643, "loss_rpn_bbox": 0.08205, "loss_cls": 0.15949, "acc": 93.68652, "loss_bbox": 0.15745, "loss": 0.42542, "grad_norm": 3.20111, "time": 0.30719}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.005, "memory": 8758, "data_time": 0.00786, "loss_rpn_cls": 0.02806, "loss_rpn_bbox": 0.08336, "loss_cls": 0.16343, "acc": 93.62207, "loss_bbox": 0.16126, "loss": 0.4361, "grad_norm": 3.42345, "time": 0.30637}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.005, "memory": 8758, "data_time": 0.00758, "loss_rpn_cls": 0.02869, "loss_rpn_bbox": 0.10667, "loss_cls": 0.17529, "acc": 93.20703, "loss_bbox": 0.16754, "loss": 0.47818, "grad_norm": 3.1726, "time": 0.30871}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.005, "memory": 8758, "data_time": 0.00754, "loss_rpn_cls": 0.02551, "loss_rpn_bbox": 0.08912, "loss_cls": 0.18144, "acc": 93.0166, "loss_bbox": 0.16481, "loss": 0.46088, "grad_norm": 3.16601, "time": 0.30692}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 0.005, "memory": 8764, "data_time": 0.00764, "loss_rpn_cls": 0.03273, "loss_rpn_bbox": 0.09802, "loss_cls": 0.16454, "acc": 93.37988, "loss_bbox": 0.15453, "loss": 0.44982, "grad_norm": 3.24521, "time": 0.30779}
{"mode": "train", "epoch": 2, "iter": 1300, "lr": 0.005, "memory": 8764, "data_time": 0.00763, "loss_rpn_cls": 0.03056, "loss_rpn_bbox": 0.08519, "loss_cls": 0.15968, "acc": 93.95508, "loss_bbox": 0.15884, "loss": 0.43427, "grad_norm": 3.25187, "time": 0.30853}
{"mode": "train", "epoch": 2, "iter": 1400, "lr": 0.005, "memory": 8764, "data_time": 0.0077, "loss_rpn_cls": 0.02362, "loss_rpn_bbox": 0.0841, "loss_cls": 0.185, "acc": 92.97656, "loss_bbox": 0.16443, "loss": 0.45715, "grad_norm": 3.30803, "time": 0.30698}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.005, "memory": 8764, "data_time": 0.0077, "loss_rpn_cls": 0.0311, "loss_rpn_bbox": 0.10846, "loss_cls": 0.16174, "acc": 93.75781, "loss_bbox": 0.15339, "loss": 0.45469, "grad_norm": 3.50637, "time": 0.30728}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.005, "memory": 8764, "data_time": 0.00772, "loss_rpn_cls": 0.03126, "loss_rpn_bbox": 0.10482, "loss_cls": 0.15939, "acc": 93.64258, "loss_bbox": 0.15587, "loss": 0.45134, "grad_norm": 3.17775, "time": 0.30649}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.005, "memory": 8764, "data_time": 0.0078, "loss_rpn_cls": 0.03019, "loss_rpn_bbox": 0.11667, "loss_cls": 0.17198, "acc": 93.08594, "loss_bbox": 0.16341, "loss": 0.48225, "grad_norm": 3.20515, "time": 0.31035}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.005, "memory": 8764, "data_time": 0.00791, "loss_rpn_cls": 0.02533, "loss_rpn_bbox": 0.10929, "loss_cls": 0.17062, "acc": 93.07031, "loss_bbox": 0.16582, "loss": 0.47105, "grad_norm": 3.16472, "time": 0.30693}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.005, "memory": 8764, "data_time": 0.00763, "loss_rpn_cls": 0.02395, "loss_rpn_bbox": 0.09085, "loss_cls": 0.16166, "acc": 93.55176, "loss_bbox": 0.15281, "loss": 0.42927, "grad_norm": 2.9265, "time": 0.30855}
